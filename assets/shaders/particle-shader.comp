#version 430 core
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

const uint clusterSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
const uvec3 linearizeInvocation = uvec3(1, clusterSize, clusterSize * clusterSize);

struct Vertex {
	vec4 Position; //align with Size (w)
	vec4 Velocity; //align with Lifetime (w)
	float Type;
	float[3] Padding; //data binding cringe due % 16 bit
};

layout(std430, binding = 0) buffer VertexBuffer {
	Vertex[1000000] vertecies;
};

uniform float globalTime;
uniform float deltaTime;
uniform vec3 position;
uniform vec3 velocity;
uniform vec3 directionError;
uniform float size;
uniform int spawnPointer;
uniform int spawnNew;
uniform float lifetime;

float hash(float n) { return fract(sin(n) * 1e4); }

float noise(float x) {
	float i = floor(x);
	float f = fract(x);
	float u = f * f * (3.0 - 2.0 * f);
	return mix(hash(i), hash(i + 1.0), u);
}

vec3 noise_vec(vec3 seed) {
	return vec3(noise(seed.x), noise(seed.y), noise(seed.z));
}

void main() {

	uint idx = uint(gl_GlobalInvocationID * linearizeInvocation);
	float z = idx / 10000;
	float y = idx % 10000 / 100;
	float x = idx % 10000 % 100;

	Vertex vertex = vertecies[idx];

	if(idx >= spawnPointer && idx < spawnPointer + spawnNew) {
		vertex.Position = vec4(position, size);

		vec3 scaleFactors = directionError;
		vec3 randomVec = noise_vec(vec3(x, y, z) + globalTime) - 0.5;
		float speed = noise(idx);
		vec3 error = normalize(randomVec) * scaleFactors;

		vertex.Velocity = vec4((velocity + error) * speed, lifetime);
		vertex.Type = 0;
	} else if(vertex.Velocity.w > 0) {
		float time = lifetime - vertex.Velocity.w;
		vertex.Position += vec4((vertex.Velocity.xyz) * deltaTime , 0);
		vertex.Velocity.w -= deltaTime;
		vertex.Type = 64 * (lifetime - vertex.Velocity.w) / lifetime;
	}

	vertecies[idx] = vertex;

}